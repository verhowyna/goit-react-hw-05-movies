{"version":3,"file":"static/js/692.8fa599c7.chunk.js","mappings":"yRAMe,SAASA,IAAc,IAADC,EACnCC,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAA4BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAExBG,GAA4BC,EAAAA,EAAAA,MAAiBC,GAAAT,EAAAA,EAAAA,GAAAO,EAAA,GAAtCG,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAClBG,EAAmC,QAAtBhB,EAAGc,EAAOG,IAAI,gBAAQ,IAAAjB,EAAAA,EAAI,IAE7CkB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACE,GAAnBtB,GAAa,GAAMoB,EAAAC,KAAA,EAEZX,EAAc,CAADU,EAAAE,KAAA,eAAAF,EAAAG,OAAA,wBAAAH,EAAAE,KAAA,GAGQE,EAAAA,EAAAA,IAAad,GAAe,KAAD,EAAtC,GAAsCQ,EAAAE,EAAAK,KAA7CN,EAAOD,EAAPC,QACK,CAADC,EAAAE,KAAA,gBAAAF,EAAAG,OAAA,kBAGZnB,EAAUe,GAASC,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAM,GAAAN,EAAA,SAEnBO,EAAAA,GAAAA,MAAY,uDAAuD,QAE/C,OAF+CP,EAAAC,KAAA,GAEnErB,GAAa,GAAOoB,EAAAQ,OAAA,6BAAAR,EAAAS,OAAA,GAAAZ,EAAA,yBAEvB,kBAhBe,OAAAH,EAAAgB,MAAA,KAAAC,UAAA,KAkBhBlB,GACF,GAAG,CAACH,IAEJ,IAAMsB,GAAWC,EAAAA,EAAAA,MAWjB,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAAA,QAAMG,SAXO,SAAAC,GACfA,EAAIC,iBAEJ,IAAQC,EAAUF,EAAIG,OAAOC,SAASC,MAA9BH,MACJA,GACF/B,EAAU,CAAEkC,MAAOH,GAEvB,EAI6BJ,SAAA,EACvBQ,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,aAAa,MACbC,YAAY,eACZC,KAAK,WAEPJ,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQT,SAAC,cAEvBrC,IAAa6C,EAAAA,EAAAA,KAACK,EAAAA,EAAM,KACrBL,EAAAA,EAAAA,KAAA,OAAAR,UACEQ,EAAAA,EAAAA,KAAA,MAAAR,SACGjC,EAAO+C,OAAS,GACf/C,EAAOgD,KAAI,SAAAR,GACT,IAAQS,EAA2BT,EAA3BS,GAAIC,EAAuBV,EAAvBU,MAAOC,EAAgBX,EAAhBW,YAEbC,EADW,kCACQD,EAEzB,OACEV,EAAAA,EAAAA,KAAA,MAAAR,UACEF,EAAAA,EAAAA,MAACsB,EAAAA,GAAO,CAACC,GAAE,GAAAC,OAAKN,GAAMO,MAAO,CAAEC,KAAM5B,GAAWI,SAAA,CAC7CkB,GACCV,EAAAA,EAAAA,KAAA,OAAKiB,IAAKN,EAAOO,IAAKT,KAEtBT,EAAAA,EAAAA,KAAA,OAAAR,SAAK,eAEPQ,EAAAA,EAAAA,KAAA,MAAAR,SAAKiB,QAPAD,EAWb,QAGa,IAAlBjD,EAAO+C,SAAiBnD,GAAaW,IACpCwB,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,UAAQ1B,EAAc,oBAInC,C","sources":["components/pages/MoviesPage/MoviesPage.js"],"sourcesContent":["import { Loader } from 'components/Loader/Loader';\nimport { searchMovies } from 'components/api';\nimport { useEffect, useState } from 'react';\nimport toast from 'react-hot-toast';\nimport { NavLink, useLocation, useSearchParams } from 'react-router-dom';\n\nexport default function MoviesPage() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [movies, setMovies] = useState([]);\n\n  const [params, setParams] = useSearchParams();\n  const searchedMovie = params.get('movie') ?? '';\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      setIsLoading(true);\n      try {\n        if (!searchedMovie) {\n          return;\n        }\n        const { results } = await searchMovies(searchedMovie);\n        if (!results) {\n          return;\n        }\n        setMovies(results);\n      } catch (error) {\n        toast.error('Oops! Something went wrong. Please try again later.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovie();\n  }, [searchedMovie]);\n\n  const location = useLocation();\n\n  const onSearch = evt => {\n    evt.preventDefault();\n\n    const { value } = evt.target.elements.movie;\n    if (value) {\n      setParams({ movie: value });\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={onSearch}>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          placeholder=\"Search movie\"\n          name=\"movie\"\n        />\n        <button type=\"button\">Search</button>\n      </form>\n      {isLoading && <Loader />}\n      <div>\n        <ul>\n          {movies.length > 0 &&\n            movies.map(movie => {\n              const { id, title, poster_path } = movie;\n              const BASE_URL = 'https://image.tmdb.org/t/p/w200';\n              const photo = BASE_URL + poster_path;\n\n              return (\n                <li key={id}>\n                  <NavLink to={`${id}`} state={{ from: location }}>\n                    {poster_path ? (\n                      <img src={photo} alt={title} />\n                    ) : (\n                      <div>No Poster</div>\n                    )}\n                    <h3>{title}</h3>\n                  </NavLink>\n                </li>\n              );\n            })}\n        </ul>\n      </div>\n      {movies.length === 0 && !isLoading && searchedMovie && (\n        <div>Movie \"{searchedMovie}\" not found.</div>\n      )}\n    </>\n  );\n}\n"],"names":["MoviesPage","_params$get","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","movies","setMovies","_useSearchParams","useSearchParams","_useSearchParams2","params","setParams","searchedMovie","get","useEffect","fetchMovie","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$searchMovies","results","_context","prev","next","abrupt","searchMovies","sent","t0","toast","finish","stop","apply","arguments","location","useLocation","_jsxs","_Fragment","children","onSubmit","evt","preventDefault","value","target","elements","movie","_jsx","type","autoComplete","placeholder","name","Loader","length","map","id","title","poster_path","photo","NavLink","to","concat","state","from","src","alt"],"sourceRoot":""}